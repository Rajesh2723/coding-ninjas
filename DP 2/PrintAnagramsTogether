Given an array of strings, return all groups of strings that are anagrams. The groups must be created in order of their appearance in the original array. Look at the sample case for clarification.

Note: The final output will be in lexicographic order.


Example 1:

Input:
N = 5
words[] = {act,god,cat,dog,tac}
Output:
act cat tac 
god dog
Explanation:
There are 2 groups of
anagrams "god", "dog" make group 1.
"act", "cat", "tac" make group 2.
//code
vector<vector<string> > Anagrams(vector<string>& v) {
        vector<vector<string>>res;
        unordered_map<string,vector<string>>mp;  //here we are creating the map of vector<string> and it act as the second one
        for(int i=0;i<v.size();i++){
            string temp=v[i];                    
            sort(temp.begin(),temp.end());         //Here we are just sorting the temp one for that we are just pushing them to the map in map it stored like the hash one
            mp[temp].push_back(v[i]);                  /// based on the key value pair
        }
        for(auto it:mp){
            res.push_back(it.second);
        }
        return res;
    }
