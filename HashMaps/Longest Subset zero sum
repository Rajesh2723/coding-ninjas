#include<unordered_map>
int lengthOfLongestSubsetWithZeroSum(int* arr, int n) {
    unordered_map<int, int> mp;
    int sum=0;
    int maxLength = 0;
    for(int i=0; i<n; i++){
    	sum += arr[i];
        if(sum==0){
            maxLength = max(maxLength, i+1);
        } else if(mp.find(sum) != mp.end()){
            maxLength = max(maxLength, i-mp[sum]);
        } else {
            mp[sum] = i;
        }
    }
    return maxLength;
}
Here is the another approach that
////
#include<bits/stdc++.h>
int lengthOfLongestSubsetWithZeroSum(int* arr, int n) {
    int max1=0;          //here where i made mistake 
    int sum=0;
    unordered_map<int,int>map;
    // map[0]=1;
    for(int i=0;i<n;i++){
	    // sum+=arr[i];
	    // if(map.find(sum)!=map.end()){
	    // max1=max(i,max1);
	    // }
	    // map[sum]=i;
          int len=0;
        sum+=arr[i];
        if(sum==0){
            len=i+1;
             if(len>max1)
                max1=len;
        }
        
        if(map.find(sum)!=map.end()){
            len=i-map[sum];
            if(len>max1)
                max1=len;
            continue;
        }
        map[sum]=i;
    }
    return max1;
}
